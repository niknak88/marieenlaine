<?php

/**
 * @implements hook_schema()
 */
function mmw_newsletter_schema()
{
    
}

/**
 * @implements hook_install()
 * 
 * Install content type used by this module
 */
function mmw_newsletter_install()
{
    // Get translation (t() is unavailable during install)
    $t = get_t();
    // Name of the content type
    $name = "newsletter";
    // Define node type
    $newsletter = array(
        'type' => $name,
        'name' => $t('Newsletter'),
        'base' => 'node_content',
        'description' => $t('This is an example node type with a few fields.'),
        'body_label' => $t('Example Description'),
        "translatable" => TRUE,
        "custom" => TRUE
    );
    // Complete the node type definition by setting any defaults not explicitly
    // declared above.
    $contentType = node_type_set_defaults($newsletter);
    node_add_body_field($contentType);
    // create all the fields we are adding to our content type
    foreach (mmw_newsletter_get_fields() as $field) {
        field_create_field($field);
    }
    // create all the instances for our fields
    foreach (mmw_newsletter_installed_instances() as $instance) {
        $instance['entity_type'] = 'node';
        $instance['bundle'] = $newsletter['type'];
        field_create_instance($instance);
    }
    // Save content type
    node_type_save($contentType);
}

/**
 * @implements hook_uninstall()
 * 
 * Uninstall content type used by this module and all nodes link to this
 * content type
 */
function mmw_newsletter_uninstall()
{
    // content type name
    $name = "newsletter";
    // Gather all the example content that might have been created while this
    // module was enabled.  Simple selects still use db_query().
    // http://api.drupal.org/api/function/db_query/7
    $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
    $result = db_query($sql, array(':type' => 'newsletter'));
    $nids = array();
    foreach ($result as $row) {
        $nids[] = $row->nid;
    }
    // Delete all the nodes at once
    // http://api.drupal.org/api/function/node_delete_multiple/7
    node_delete_multiple($nids);
    // find all fields and delete them
    foreach (array_keys(mmw_newsletter_get_fields()) as $field) {
        field_delete_field($field);
    }
    // find all fields and delete instance
    $instances = field_info_instances('node', $name);
    foreach ($instances as $instance_name => $instance) {
        field_delete_instance($instance);
    }
    // Delete our content type
    // http://api.drupal.org/api/function/node_type_delete/7
    node_type_delete('newsletter');
    // purge all field infromation
    field_purge_batch(1000);
    cache_clear_all();
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return
 *  An associative array specifying the fields we wish to add to our
 *  new node type.
 */
function mmw_newsletter_get_fields()
{
    $fields = array();
    // Boolean sync field
    $fields["field_newsletter_synchronized"] = array(
        'field_name' => 'field_newsletter_synchronized',
        'cardinality' => 1,
        'entity_type' => 'node',
        'type' => 'list_boolean',
        'description' => 'Is this newsletter synchronized',
        'label' => 'Synchronized',
        'widget' => array(
            'type' => 'options_onoff',
        ),
        'settings' => array(
            'allowed_values' => array(
                '0' => 'No',
                '1' => 'Yes',
            ),
        ),
    );
    // List field
    $fields["field_newsletter_list"] = array(
        'field_name' => 'field_newsletter_list',
        'cardinality' => 1,
        'entity_type' => 'node',
        'type' => 'list_text',
        'description' => 'The list to send the newsletter',
        'label' => 'Newsletter list',
        'widget' => array(
            'type' => 'options_select',
        ),
        'settings' => array(
            'allowed_values' => array(
                '0' => 'No list is sync yet'
            ),
        ),
    );
    return $fields;
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return
 *  An associative array specifying the instances we wish to add to our new
 *  node type.
 */
function mmw_newsletter_installed_instances()
{
    $instances = array();
    $instances["field_newsletter_synchronized"] = array(
        'field_name' => "field_newsletter_synchronized",
        'entity_type' => 'node',
        'bundle' => 'newsletter',
        'label' => 'Synchronized',
        'description' => 'Set the newsletter as synchronized with interspire',
        'required' => FALSE,
    );
    $instances["field_newsletter_list"] = array(
        'field_name' => "field_newsletter_list",
        'entity_type' => 'node',
        'bundle' => 'newsletter',
        'label' => 'Newsletter list',
        'description' => 'Set the list to send the newsletter',
        'required' => FALSE,
    );
    return $instances;
}
